---
import Layout from '@layouts/Layout.astro';
import Icon from "heroicons-astro/Heroicon.astro";

import { getCollection } from 'astro:content';
import { Image, Picture } from 'astro:assets';

const videoUrl = 'https://stj-videos.vidflow.co/studio/o3yfykia/deliverable/oec22imz/media/b0jwcoz9-1stygogv/ChrisNatalie_comp.mp4';
const allImages = await getCollection('gallery');
---

<script>
    const SHOW_CLASS = 'show';
    const SHOW_CLASS_BF = 'show-below-fold';

    const imageLinks = document.querySelectorAll('a.image');
    const lightboxes = document.querySelectorAll('.lightbox');

    const imageCount = lightboxes.length;

    const lightboxCloseButtons = document.querySelectorAll('.lightbox .close');
    lightboxCloseButtons?.forEach(b => {
        b.addEventListener('click', () => {
            handleModalClose();
        })
    })
    const closeButton = document.querySelectorAll('.lightbox-container .close');
    closeButton?.forEach(b => {
        b.addEventListener('click', () => {
            handleModalClose();
        })
    })

    const showLightbox = (id: number | string) => {
        history.pushState({}, '', `${location.origin}/gallery#${id}`);

        const allLightboxImages = document.querySelectorAll('.lightbox-container .lightbox.show');
        allLightboxImages?.forEach(i => {
            i.classList.toggle(SHOW_CLASS, false);
        })

        const containerEl = document.querySelector('.lightbox-container');
        const bigImage = document.getElementById(`${id}-lightbox`);

        if (!bigImage) {
            history.pushState({}, '', location.pathname);
            handleModalClose();
            return;
        }
        
        containerEl?.classList.toggle(SHOW_CLASS, true);
        bigImage?.classList?.toggle(SHOW_CLASS, true);
    }

    const handleNext = () => {
        const currentHash = location.hash?.replace("#image-", '');
        if (currentHash == null || currentHash === '') {
            return;
        }

        const hashIndex = parseInt(currentHash, 10);
        const nextId = imageCount - 1 === hashIndex ? 0 : hashIndex + 1;
        showLightbox(`image-${nextId}`);
    }
    const handlePrevious = () => {
        const currentHash = location.hash?.replace("#image-", '');
        if (currentHash == null || currentHash === '') {
            return;
        }

        const hashIndex = parseInt(currentHash, 10);
        const nextId = hashIndex === 0 ? imageCount - 1 : hashIndex - 1;
        showLightbox(`image-${nextId}`);
    }

    const handleHashChange = (e: HashChangeEvent) => {
        e.preventDefault();
        const currentHash = location.hash?.replace("#", '');
        showLightbox(currentHash);
    }
    
    const handleKeyDown = (e: KeyboardEvent) => {
        e.preventDefault();
        switch (e.key) {
            case 'Escape':
                handleModalClose();
                return;
            case 'ArrowRight':
                handleNext();
                return;
            case 'ArrowLeft':
                handlePrevious();
                return;
        }
    }

    const handleModalClose = () => {
        history.pushState({}, '', location.pathname);

        const containerEl = document.querySelector('.lightbox-container');
        containerEl?.classList.toggle(SHOW_CLASS, false);

        lightboxes.forEach(lb => {
            lb.classList.toggle(SHOW_CLASS, false);
        })

        window.removeEventListener('keydown', handleKeyDown);
    }

    imageLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();

            const id = link.id;
            showLightbox(id);

            window.addEventListener('keydown', handleKeyDown);
        })
    })

    const previousBtn = document.querySelector('.nav-container button.previous');
    previousBtn?.addEventListener('click', handlePrevious);

    const nextBtn = document.querySelector('.nav-container button.next');
    nextBtn?.addEventListener('click', handleNext);

    let initialLoad = true;
    const images = document.querySelectorAll('.gallery .image');
    const observerImages = new IntersectionObserver((e) => {
        const visible = e.filter(entry => entry.isIntersecting);
        visible.forEach(image => (image.target as HTMLAnchorElement)?.classList?.toggle(initialLoad ? SHOW_CLASS : SHOW_CLASS_BF, true));

        initialLoad = false;
    }, { threshold: 0 })
    images.forEach(i => observerImages.observe(i));

    const imagesText = document.querySelector('.text-section.gallery-section');
    const observerText = new IntersectionObserver((e) => {
        console.log(e)
        const visible = e.filter(entry => entry.isIntersecting);
        visible.forEach(v => {
            v.target.classList.add(SHOW_CLASS)
        })
    })
    if (imagesText) {
        console.log(imagesText)
        observerText.observe(imagesText);
    }

    const videos = document.querySelectorAll('video');
    videos.forEach(v => {
        if (v.readyState >= 2) {
            v.classList.add('loaded');
        } else {
            v.addEventListener('loadedmetadata', (e) => {
                v.classList.add('loaded');
            })
        }
    })

    const currentHash = location.hash.replace("#", '');
    showLightbox(currentHash);

    window.addEventListener('hashchange', handleHashChange)
</script>

<Layout title='Image Gallery'>
    <div class="lightbox-container">
        <div class="content">
            {
                allImages.map((image: any, i: number) => (
                    <div id={`image-${i}-lightbox`} class="lightbox">
                        <Image
                            src={image.data.src} 
                            alt={image.data.alt}
                            class={`fade-in ${image.data.direction}`}
                            style="--animation-duration: 300ms; --animation-delay: 100ms;"
                        />
                    </div>
                ))
            }
            <div class="nav-container">
                <button class="nav previous" aria-name="previous">
                    <Icon iconCode="chevron-left" iconStyle="outline" />
                </button>
                <button class="nav next" aria-name="next">
                    <Icon iconCode="chevron-right" iconStyle="outline" />
                </button>
            </div>
        </div>
        <button class="close" aria-name="close"/>
        <div class="backdrop fade-in" style="--animation-duration: 100ms;" />
    </div>
    <main>
        <section class="text-section" style="--animation-duration: 1500ms;">
            <h1 class="fly-in" style="--animation-delay: 100ms;">
                Our story
            </h1>
            <p class="fly-in" style="--animation-delay: 300ms;">
                When we first met in Seattle in September of 2020, the world was in a very different place. And so were we. Chris had just, a month and a half prior, moved to Seattle. 
                And Natalie, at the time at least, was trying to leave it. She did eventually, moving to Chicago. There was no way we could have known that Chris would still be along 
                along for the ride. Or, that almost 5 years later, they'd be getting married. We'll let Raven, of <a href="https://aworldawayfilms.com/" target="_blank">A World Away Films</a>
                tell a little bit of that story. 
            </p>
        </section>

        <section class="video-gallery fly-in" style="--animation-duration: 1500ms; --animation-delay: 500ms;">
            <video
                src={videoUrl}
                controls
                oncontextmenu="return false"
                poster="https://meta.vidflow.co/studio/o3yfykia/media/zsg0fqjf/ScreenShot2024-10-23at120944AM.png?width=960&height=960&optimize=image"
            />
        </section>

        <section class="text-section gallery-section" style="--animation-duration: 1500ms; margin-top: 2rem;">
            <h1 class="fly-in" style="--animation-delay: 700ms;">
                A little bit of us
            </h1>
            <p class="fly-in" style="--animation-delay: 900ms;">
                It was important to us that our engagement photography capture who are we are a couple. Both tennis and the outdoors, as represented by Chicago's <a href="https://en.wikipedia.org/wiki/Humboldt_Park,_Chicago" target="_blank">Humboldt Park</a>, 
                have played large roles in our relationship and our shared hobbies. (Eating might be the other big one.) We want to send a big thank you to Noelle, of <a href="https://noellethies.co/" target="_blank">Noelle Thies Photography</a>, 
                for so beautifully capturing that little bit of who we are. 
            </p>
        </section>
    
        <section class="gallery" style="--base-delay: 500ms;">
            {
                allImages.map((image: any, i: number) => (
                    <a 
                        id={`image-${i}`} 
                        class={`image ${image.data.direction}`} 
                        href={`#image-${i}`}
                        style={`--delay-offset: ${Math.random() * 500}ms;`}
                    >
                        <Picture
                            src={image.data.src} 
                            alt={image.data.alt}
                            width={image.data.direction === 'horizontal' ? 500 : 400}
                            formats={['avif', 'webp']}
                        />
                    </a>
                ))
            }
        </section>
    </main>
</Layout>

<style lang="scss">
    @use '@styles/media.scss' as Media;

    main {
        scroll-behavior: smooth;

        section {
            margin: auto;
            
            width: 100%;
            max-width: 400px;
            @include Media.at('medium') {
                max-width: 720px;
            }
            @include Media.at('large') {
                max-width: 1000px;
            }
            @include Media.at('extra-large') {
                max-width: 1200px;
            }
        }


        margin: auto;

        display: flex;
        flex-direction: column;
        gap: var(--space-line);

        padding: 1.5rem var(--space-line) var(--space-large);
        
        @include Media.at('medium') {
            gap: var(--space-small);
            padding: var(--space-large) 0 var(--space-large);
        }

        &:has(.lightbox.show) {
            section {
                pointer-events: none;
            }
        }
    }

    p {
        max-width: 60rem;
        text-wrap: pretty;
    }

    .text-section {
        display: flex;
        flex-direction: column;
        gap: var(--space-line);

        &.gallery-section {
            &:not(.show) {
                * {
                    display: none;
                    content-visibility: hidden;
                }
            }
        }
    }

    .video-gallery {
        height: fit-content;
        background-color: var(--color-green);
        transition: background-color 200ms ease-in-out;

        &:has(video.loaded) {
            background-color: transparent;
        }

        video {
            max-width: 100%;
            height: auto;
            aspect-ratio: auto 1600 / 1067;
            border-radius: 3px;
            overflow: hidden;
            pointer-events: none;

            opacity: 0;
            transition: opacity 200ms ease-in-out;

            &.loaded {
                opacity: 1;
                pointer-events: all;
            }
        }
    }
    
    .gallery {
        display: grid;
        grid-auto-flow: dense;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-base);

        @include Media.at('medium') {
            grid-template-columns: repeat(3, 1fr);
        }
        @include Media.at('large') {
            grid-template-columns: repeat(4, 1fr);
        }
        @include Media.at('extra-large') {
            grid-template-columns: repeat(5, 1fr);
        }
        
        
        .image {
            scale: 0;
            opacity: 0;
            content-visibility: auto;

            transition: transform 200ms ease-in-out;

            &:hover {
                box-shadow: 0px 4px 12px 0px rgba(0, 0, 0, 0.2);
                transform: scale(1.01);
            }
            
            &.show {
                --animation-delay: calc(var(--base-delay, 0) + var(--delay-offset, 0));
                --animation-duration: 1000ms;
            }
            &.show-below-fold {
                --animation-delay: 100ms;
                --animation-duration: 700ms;

            }
            animation: pop-in var(--animation-duration) cubic-bezier(.78,.04,.74,1.17) var(--animation-delay) 1 normal forwards;

            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            
            cursor: pointer;
            
            min-width: 100%;
            min-height: 100%;
            width: auto;
            height: auto;
            border-radius: 3px;
            overflow: hidden;

            &.horizontal {
                picture {
                    aspect-ratio: 1600 / 1067;
                }

                height: auto;
                @include Media.at('medium') {
                    height: 349px;
                }
                @include Media.at('large') {
                    height: 363px;
                }
                @include Media.at('extra-large') {
                    height: 347px;
                }
            }

            picture {
                pointer-events: none;
                min-width: 100%;
                min-height: 100%;
                display: flex;
                flex-shrink: 0;
                justify-content: center;
                align-items: center;
            }
            
            img {
                flex-shrink: 0;
                pointer-events: none;
                min-width: 100%;
                min-height: 100%;
                max-width: none;
                max-height: none;
            }

            &.horizontal {
                grid-column-start: span 2;

                img {
                    height: 100%;
                    width: auto;
                    aspect-ratio: 1600 / 1067;
                }
            }
            &.vertical {
                img {
                    width: 100%;
                    height: auto;
                    aspect-ratio: 1067 / 1600;
                }
                @include Media.at('large') {
                    &:nth-child(3n - 2) {
                        grid-column-start: span 2;
                        grid-row-start: span 2;
                    }  
                }
            }    
        }

        @keyframes pop-in {
            from {
                scale: 0.5;
                opacity: 0;
            }
            to {
                scale: 1;
                opacity: 1;
            }
        }
    }

    :global(html:has(.lightbox.show)) {
        body {
            overflow: hidden;
        }
        main {
            pointer-events: none;
        }
    }

    .lightbox-container:not(.show),
    .lightbox:not(.show) {
            display: none;
            content-visibility: hidden;
            visibility: hidden;
    }

    .lightbox-container {
        --button-height: 40px;

        z-index: 1000;
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 100vw;
        overflow: hidden;

        .backdrop {
            z-index: 5;
            position: absolute;
            height: 100%;
            width: 100%;
            
            background-color: rgba(75, 75, 75, 0.85);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }

        .close {
            z-index: 10;
            cursor: pointer;
            height: var(--button-height);
            aspect-ratio: 1 / 1;

            position: absolute;
            top: var(--space-line);
            right: var(--space-line);
            @include Media.at('medium') {
                top: var(--space-small);
                right: var(--space-small);
            }

            border: var(--color-white) solid 2px;
            background-color: transparent;
            border-radius: 888px;
            transition: background-color 200ms ease-in-out;

            &::after, &:before {
                content: "";

                position: absolute;
                top: 50%;
                left: 50%;
                translate: -50% -50%;

                width: 2px;
                height: calc(100% - 0.75rem);

                background-color: var(--color-white);
                transition: background-color 200ms ease-in-out;
            }
            &::before {
                rotate: 45deg;
            }
            &::after {
                rotate: -45deg;
            }

            &:hover, &:active {
                background-color: var(--color-white);
                &:before, &:after {
                    background-color: var(--color-green);
                }
            }
        }
    }
    .lightbox-container .content {
        --max-width: calc(100vw - 6rem);
        --max-height: calc(100vh - 6rem);

        position: fixed;
        top: 50%;
        left: 50%;
        translate: -50% -50%;

        z-index: 211;

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: var(--space-line);

        .lightbox {
            --transparent-green: color-mix(in srgb, var(--color-green) 30%, transparent 50%);

            background: linear-gradient(45deg, var(--transparent-green), color-mix(in srgb, gray 30%, transparent 50%), var(--transparent-green));

            border-radius: 4px;
            
            overflow: hidden;

            &:has(.vertical) {
                --aspect: calc(1067 / 1600);
                aspect-ratio: 1067 / 1600;
            }
            &:has(.horizontal) {
                --aspect: calc(1600 / 1067);
                aspect-ratio: 1600 / 1067;
            }

            @media (orientation: portrait) {
                --real-max-width: min(1067px, var(--max-width));
                --real-max-height: min(var(--max-height), calc(var(--real-max-width) / var(--aspect)));
                height: var(--real-max-height);
            }
            @media (orientation: landscape) {
                --real-max-height: min(1067px, var(--max-height));
                --real-max-width: min(var(--max-width), calc(var(--real-max-height) * var(--aspect)));
                width: var(--real-max-width);
            }
        }

        img {
            z-index: 10;
            isolation: isolate;
            height: auto;
            width: auto;
            max-width: var(--max-width);
            max-height: var(--max-height);
        }

        .nav-container {
            width: 100%;
            display: flex;
            justify-content: flex-start;
            align-items: center;
            gap: var(--space-line);

            @include Media.at('medium') {
                z-index: 2000;
                position: absolute;
                top: 50%;
                left: 50%;
                translate: -50% -50%;

                width: calc(100% + 5.5rem);

                justify-content: space-between;
            }

            button {
                position: relative;
                height: var(--button-height);
                width: auto;
                aspect-ratio: 1 / 1;

                background-color: transparent;
                border: var(--color-white) 1px solid;
                border-radius: 100%;

                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;

                transition: background-color 200ms ease-in-out;

                :global(svg) {
                    color: var(--color-white);
                    transition: color 200ms ease-in-out;
                }
                &.previous :global(svg) {
                    translate: -5% 0;
                }
                &.next :global(svg) {
                    translate: 5% 0;
                }

                &:hover, &:active {
                    background-color: var(--color-white);

                    :global(svg) {
                        color: var(--color-green);
                    }
                }
            }
        }
    }
</style>