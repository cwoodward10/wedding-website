---
import Layout from '@layouts/Layout.astro';
import Icon from "heroicons-astro/Heroicon.astro";

import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

const allImages = await getCollection('gallery');
---

<script>
    const SHOW_CLASS = 'show';
    const SHOW_CLASS_BF = 'show-below-fold';

    const imageLinks = document.querySelectorAll('a.image');
    const lightboxes = document.querySelectorAll('.lightbox');

    const imageCount = lightboxes.length;

    const lightboxCloseButtons = document.querySelectorAll('.lightbox .close');
    lightboxCloseButtons?.forEach(b => {
        b.addEventListener('click', () => {
            handleModalClose();
        })
    })
    const closeButton = document.querySelectorAll('.lightbox-container .close');
    closeButton?.forEach(b => {
        b.addEventListener('click', () => {
            handleModalClose();
        })
    })

    const showLightbox = (id: number | string) => {
        history.pushState({}, '', `${location.origin}/gallery#${id}`);

        const allLightboxImages = document.querySelectorAll('.lightbox-container .lightbox.show');
        allLightboxImages?.forEach(i => {
            i.classList.toggle(SHOW_CLASS, false);
        })

        const containerEl = document.querySelector('.lightbox-container');
        const bigImage = document.getElementById(`${id}-lightbox`);

        if (!bigImage) {
            history.pushState({}, '', location.pathname);
            handleModalClose();
            return;
        }
        
        containerEl?.classList.toggle(SHOW_CLASS, true);
        bigImage?.classList?.toggle(SHOW_CLASS, true);
    }

    const handleNext = () => {
        const currentHash = location.hash?.replace("#image-", '');
        if (currentHash == null || currentHash === '') {
            return;
        }

        const hashIndex = parseInt(currentHash, 10);
        const nextId = imageCount - 1 === hashIndex ? 0 : hashIndex + 1;
        showLightbox(`image-${nextId}`);
    }
    const handlePrevious = () => {
        const currentHash = location.hash?.replace("#image-", '');
        if (currentHash == null || currentHash === '') {
            return;
        }

        const hashIndex = parseInt(currentHash, 10);
        const nextId = hashIndex === 0 ? imageCount - 1 : hashIndex - 1;
        showLightbox(`image-${nextId}`);
    }

    const handleHashChange = (e: HashChangeEvent) => {
        e.preventDefault();
        const currentHash = location.hash?.replace("#", '');
        showLightbox(currentHash);
    }
    
    const handleKeyDown = (e: KeyboardEvent) => {
        e.preventDefault();
        switch (e.key) {
            case 'Escape':
                handleModalClose();
                return;
            case 'ArrowRight':
                handleNext();
                return;
            case 'ArrowLeft':
                handlePrevious();
                return;
        }
    }

    const handleModalClose = () => {
        history.pushState({}, '', location.pathname);

        const containerEl = document.querySelector('.lightbox-container');
        containerEl?.classList.toggle(SHOW_CLASS, false);

        lightboxes.forEach(lb => {
            lb.classList.toggle(SHOW_CLASS, false);
        })

        window.removeEventListener('keydown', handleKeyDown);
    }

    imageLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();

            const id = link.id;
            showLightbox(id);

            window.addEventListener('keydown', handleKeyDown);
        })
    })

    const previousBtn = document.querySelector('.nav-container button.previous');
    previousBtn?.addEventListener('click', handlePrevious);

    const nextBtn = document.querySelector('.nav-container button.next');
    nextBtn?.addEventListener('click', handleNext);

    let initialLoad = true;
    const images = document.querySelectorAll('.gallery .image');
    const observer = new IntersectionObserver((e) => {
        const visible = e.filter(entry => entry.isIntersecting);
        visible.forEach(image => (image.target as HTMLAnchorElement)?.classList?.toggle(initialLoad ? SHOW_CLASS : SHOW_CLASS_BF, true));

        initialLoad = false;
    })
    images.forEach(i => observer.observe(i));

    const currentHash = location.hash.replace("#", '');
    showLightbox(currentHash);

    window.addEventListener('hashchange', handleHashChange)
</script>

<Layout title='Image Gallery'>
    <div class="lightbox-container">
        <div class="content">
            {
                allImages.map((image: any, i: number) => (
                    <div id={`image-${i}-lightbox`} class="lightbox">
                        <Image
                            src={image.data.src} 
                            alt={image.data.alt}
                            class="fade-in"
                            style="--animation-duration: 300ms; --animation-delay: 100ms;"
                        />
                    </div>
                ))
            }
            <div class="nav-container">
                <button class="nav previous" aria-name="previous">
                    <Icon iconCode="chevron-left" iconStyle="outline" />
                </button>
                <button class="nav next" aria-name="next">
                    <Icon iconCode="chevron-right" iconStyle="outline" />
                </button>
            </div>
        </div>
        <button class="close" aria-name="close"/>
        <div class="backdrop fade-in" style="--animation-duration: 100ms;" />
    </div>
    <main>

        <section class="hero" style="--animation-duration: 1500ms;">
            <h1 class="fly-in">The gallery</h1>
            <p class="fly-in" style="--animation-delay: 200ms;">
                Our engagement photo shoot was shot by <a href="https://noellethiesco.pic-time.com/-nataliechris/gallery">Noelle Thies</a>. 
                They were taken at 2 different sites. The first being Humboldt Park in Chicago and the other at 
                the Oak Park - River Forest High School tennis courts in Oak Park, IL. 
            </p>
        </section>
    
        <section class="gallery" style="--base-delay: 500ms;">
            {
                allImages.map((image: any, i: number) => (
                    <a 
                        id={`image-${i}`} 
                        class={`image ${image.data.direction}`} 
                        href={`#image-${i}`}
                        style={`--delay-offset: ${Math.random() * 500}ms;`}
                    >
                        <Image
                            src={image.data.src} 
                            alt={image.data.alt}
                            width={image.data.direction === 'horizontal' ? 500 : 400}
                        />
                    </a>
                ))
            }
        </section>
    </main>
</Layout>

<style lang="scss">
    @use '@styles/media.scss' as Media;

    main {
        scroll-behavior: smooth;

        section {
            margin: auto;
            
            width: 100%;
            max-width: 400px;
            @include Media.at('medium') {
                max-width: 720px;
            }
            @include Media.at('large') {
                max-width: 1000px;
            }
            @include Media.at('extra-large') {
                max-width: 1200px;
            }
        }


        margin: auto;

        display: flex;
        flex-direction: column;
        gap: var(--space-line);

        padding: 1.5rem var(--space-line) var(--space-large);
        
        @include Media.at('medium') {
            gap: var(--space-small);
            padding: var(--space-large) 0 var(--space-large);
        }

        &:has(.lightbox.show) {
            section {
                pointer-events: none;
            }
        }
    }

    p {
        max-width: 800px;
        text-wrap: pretty;
    }

    .hero {
        display: flex;
        flex-direction: column;
        gap: var(--space-line);
    }
    .gallery {
        display: grid;
        grid-auto-flow: dense;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-base);

        @include Media.at('medium') {
            grid-template-columns: repeat(3, 1fr);
        }
        @include Media.at('large') {
            grid-template-columns: repeat(4, 1fr);
        }
        @include Media.at('extra-large') {
            grid-template-columns: repeat(5, 1fr);
        }
        
        
        .image {
            scale: 0;
            opacity: 0;
            content-visibility: auto;

            transition: transform 200ms ease-in-out;

            &:hover {
                box-shadow: 0px 4px 12px 0px rgba(0, 0, 0, 0.2);
                transform: scale(1.01);
            }
            
            &.show {
                --animation-delay: calc(var(--base-delay, 0) + var(--delay-offset, 0));
                --animation-duration: 1000ms;
            }
            &.show-below-fold {
                --animation-delay: 100ms;
                --animation-duration: 700ms;

            }
            animation: pop-in var(--animation-duration) cubic-bezier(.78,.04,.74,1.17) var(--animation-delay) 1 normal forwards;

            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            
            cursor: pointer;
            
            min-width: 100%;
            min-height: 100%;
            width: auto;
            height: auto;

            &:has(.horizontal) {
                height: auto;
                @include Media.at('medium') {
                    height: 349px;
                }
                @include Media.at('large') {
                    height: 363px;
                }
                @include Media.at('extra-large') {
                    height: 347px;
                }
            }
            
            img {
                pointer-events: none;
                width: 100%;
                height: auto;
                aspect-ratio: auto 1067 / 1600;
            }

            &.horizontal {
                grid-column-start: span 2;

                img {
                    max-width: unset;
                    width: auto;
                    height: 100%;
                    aspect-ratio: auto 1600 / 1067;
                }
            }
            &.vertical:nth-child(3n - 2) {
                grid-column-start: span 2;
                grid-row-start: span 2;
            }      
        }

        @keyframes pop-in {
            from {
                scale: 0.5;
                opacity: 0;
            }
            to {
                scale: 1;
                opacity: 1;
            }
        }
    }

    :global(html:has(.lightbox.show)) {
        body {
            overflow: hidden;
        }
        main {
            pointer-events: none;
        }
    }

    .lightbox-container:not(.show),
    .lightbox:not(.show) {
            display: none;
            content-visibility: hidden;
            visibility: hidden;
    }

    .lightbox-container {
        --button-height: 40px;

        z-index: 1000;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        overflow: hidden;

        .backdrop {
            z-index: 5;
            position: absolute;
            height: 100%;
            width: 100%;
            
            background-color: rgba(75, 75, 75, 0.65);
            backdrop-filter: blur(10px);
        }

        .close {
            z-index: 10;
            cursor: pointer;
            height: var(--button-height);
            aspect-ratio: 1 / 1;

            position: absolute;
            top: var(--space-line);
            right: var(--space-line);
            @include Media.at('medium') {
                top: var(--space-small);
                right: var(--space-small);
            }

            border: var(--color-white) solid 2px;
            background-color: transparent;
            border-radius: 888px;
            transition: background-color 200ms ease-in-out;

            &::after, &:before {
                content: "";

                position: absolute;
                top: 50%;
                left: 50%;
                translate: -50% -50%;

                width: 2px;
                height: calc(100% - 0.75rem);

                background-color: var(--color-white);
                transition: background-color 200ms ease-in-out;
            }
            &::before {
                rotate: 45deg;
            }
            &::after {
                rotate: -45deg;
            }

            &:hover, &:active {
                background-color: var(--color-white);
                &:before, &:after {
                    background-color: var(--color-green);
                }
            }
        }
    }
    .lightbox-container .content {
        position: fixed;
        top: 50%;
        left: 50%;
        translate: -50% -50%;

        z-index: 211;

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: var(--space-line);

        img {
            z-index: 10;
            isolation: isolate;
            max-width: calc(100vw - 6rem);
            max-height: calc(100vh - 6rem);
            height: auto;
            width: auto;
        }

        .nav-container {
            width: 100%;
            display: flex;
            justify-content: flex-start;
            align-items: center;
            gap: var(--space-line);

            @include Media.at('medium') {
                z-index: 2000;
                position: absolute;
                top: 50%;
                left: 50%;
                translate: -50% -50%;

                width: calc(100% + 5.5rem);

                justify-content: space-between;
            }

            button {
                position: relative;
                height: var(--button-height);
                width: auto;
                aspect-ratio: 1 / 1;

                background-color: transparent;
                border: var(--color-white) 1px solid;
                border-radius: 100%;

                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;

                transition: background-color 200ms ease-in-out;

                :global(svg) {
                    color: var(--color-white);
                    transition: color 200ms ease-in-out;
                }
                &.previous :global(svg) {
                    translate: -5% 0;
                }
                &.next :global(svg) {
                    translate: 5% 0;
                }

                &:hover, &:active {
                    background-color: var(--color-white);

                    :global(svg) {
                        color: var(--color-green);
                    }
                }
            }
        }
    }
</style>